AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless AI-Powered Event Assistant MVP - Event Registration
  
Globals:
  Function:
    Timeout: 3
    

Parameters:
  LogLevel:
    Type: String
    Default: INFO
  UserPoolId:
    Type: String
    Default: us-east-1_m9KnTEHHl
  UserPoolClientId:
    Type: String
    Default: "2evg82jv37qsjqsqe11ie187ij"

Resources:
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: event-assistant-api
      Description: "This is a test api"
      StageName: dev
      DefinitionUri: swagger.yaml

  CommonLibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CommonLibsLayer
      Description: This is the common nodejs libraries used across lambdas
      ContentUri: layers/commonlibs
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete
      
  CommonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CommonsLayer
      Description: This is the collection of commonly used functions
      ContentUri: layers/commons/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'Available under the MIT-0 license.'
      RetentionPolicy: Delete

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: events
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  SpeakersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: speakers
      AttributeDefinitions:
        - AttributeName: speakerId
          AttributeType: S
      KeySchema:
        - AttributeName: speakerId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sessions
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: eventId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: eventId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  AttendeesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: attendees
      AttributeDefinitions:
        - AttributeName: attendeeId
          AttributeType: S
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: attendeeId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
            - AttributeName: eventId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: eventId-index
          KeySchema:
            - AttributeName: eventId
              KeyType: HASH
            - AttributeName: attendeeId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  SessionRegistrationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: session_registrations
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: attendeeId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: attendeeId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: attendeeId-index
          KeySchema:
            - AttributeName: attendeeId
              KeyType: HASH
            - AttributeName: sessionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: eventId-index
          KeySchema:
            - AttributeName: eventId
              KeyType: HASH
            - AttributeName: sessionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  AuthenticateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: authenticate-user
      CodeUri: auth/
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          ATTENDEES_TABLE: !Ref AttendeesTable
          logLevel: !Ref LogLevel
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AttendeesTable
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - cognito-idp:InitiateAuth
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId} 
      Layers:
        - !Ref CommonLibsLayer
        - !Ref CommonsLayer
      Events:
        AuthenticateUser:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref ServerlessRestApi

  RegisterAttendeeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: register-attendee
      CodeUri: register/
      Handler: index.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          ATTENDEES_TABLE: !Ref AttendeesTable
          logLevel: !Ref LogLevel
          USER_POOL_ID: !Ref UserPoolId
          USER_POOL_CLIENT_ID: !Ref UserPoolClientId
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AttendeesTable
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - cognito-idp:SignUp
              - cognito-idp:InitiateAuth
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId} 
        - AmazonSESFullAccess
      Layers:
        - !Ref CommonLibsLayer
        - !Ref CommonsLayer
      Events:
        RegisterAttendee:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId: !Ref ServerlessRestApi

  BookSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: book-session
      CodeUri: sessions/
      Handler: index.bookSession
      Runtime: nodejs20.x
      Environment:
        Variables:
          SESSION_REGISTRATIONS_TABLE: !Ref SessionRegistrationsTable
          SESSIONS_TABLE: !Ref SessionsTable
          logLevel: !Ref LogLevel
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionRegistrationsTable
      Layers:
        - !Ref CommonLibsLayer
        - !Ref CommonsLayer
      Events:
        BookSession:
          Type: Api
          Properties:
            Path: /sessions/{sessionId}/book
            Method: post
            RestApiId: !Ref ServerlessRestApi
        
  CancelSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: cancel-session
      CodeUri: sessions/
      Handler: index.cancelSession
      Runtime: nodejs20.x
      Environment:
        Variables:
          SESSION_REGISTRATIONS_TABLE: !Ref SessionRegistrationsTable
          SESSIONS_TABLE: !Ref SessionsTable
          logLevel: !Ref LogLevel
      MemorySize: 128
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionRegistrationsTable
      Layers:
        - !Ref CommonLibsLayer
        - !Ref CommonsLayer
      Events:
        CancelSession:
          Type: Api
          Properties:
            Path: /sessions/{sessionId}/cancel
            Method: delete
            RestApiId: !Ref ServerlessRestApi

Outputs:
  AttendeesTableArn:
    Description: "Attendees Table ARN"
    Value: !GetAtt AttendeesTable.Arn
  EventsTableArn:
    Description: "Events Table ARN"
    Value: !GetAtt EventsTable.Arn
  SessionsTableArn:
    Description: "Sessions Table ARN"
    Value: !GetAtt SessionsTable.Arn



