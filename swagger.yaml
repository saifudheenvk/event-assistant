openapi: 3.0.0
info:
  title: My test api collection
  description: Public API Specification for the myFitApp Mobile Marketing Platform
  version: "1.0.0"
  contact:
    name: Saifu
    url: 'https://saifu.com'
    email: saifu@saifu.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
  params-only:
    validateRequestParameters: true
    validateRequestBody: false
  body-only:
    validateRequestParameters: false
    validateRequestBody: true

paths:
  /login:
    post:
      summary: Login
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - login
        operationId: login
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:authenticate-user/invocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      x-amazon-apigateway-auth:
        type: NONE
  /register:
    post:
      summary: Register
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - register
        operationId: register
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:register-attendee/invocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestBody'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      x-amazon-apigateway-auth:
        type: NONE

  /sessions/{sessionId}/book:
    post:
      summary: Book a session
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: POST
        tags:
          - sessions
        operationId: bookSession
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:book-session/invocations
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookSessionResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JWTToken: []
  /sessions/{sessionId}/cancel:
    delete:
      summary: Cancel a session
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: DELETE
        tags:
          - sessions
        operationId: cancelSession
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cancel-session/invocations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelSessionResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JWTToken: []
  /events/{eventId}:
    get:
      summary: Get event details
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws_proxy
        passthroughBehavior: when_no_match
        httpMethod: GET
        tags:
          - events
        operationId: getEventDetails
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:get-event-details/invocations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetailsResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JWTToken: []

components:
  securitySchemes:
    JWTToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Token Authentication"
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/us-east-1_m9KnTEHHl


  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        statusCode:
          type: number
        requestId:
          type: string
    BookSessionResponse:
      type: object
      properties:
        message:
          type: string
        sessionRegistration:
          type: object
    CancelSessionResponse:
      type: object
      properties:
        message:
          type: string
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        id:
          type: string
        eventId:
          type: string
    RegisterRequestBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        preferences:
          type: object
        communicationOptIn:
          type: boolean
        eventId:
          type: string
    LoginRequestBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        eventId:
          type: string
    SessionDetails:
      type: object
      properties:
        sessionId:
          type: string
        sessionName:
          type: string
        speaker:
          type: object
        sessionDescription:
          type: string
        sessionDate:
          type: string
        sessionLocation:
          type: string
        sessionType:
          type: string
        capacity:
          type: number
        bookedSeats:
          type: number
    EventDetailsResponse:
      type: object
      properties:
        eventDetails:
          type: object
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionDetails'